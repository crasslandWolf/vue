{"version":3,"sources":["/node_modules/superagent/lib/response-base.js"],"names":[],"mappings":";;;;;;;;;AAKA,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;;;;;AAM/B,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;;;;;;;;AAQ9B,SAAS,YAAY,CAAC,GAAG,EAAE;AACzB,MAAI,GAAG,EAAE,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;CAC5B;;;;;;;;;;AAUD,SAAS,KAAK,CAAC,GAAG,EAAE;AAClB,OAAK,IAAI,GAAG,IAAI,YAAY,CAAC,SAAS,EAAE;AACtC,OAAG,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;GACxC;AACD,SAAO,GAAG,CAAC;CACZ;;;;;;;;;;AAUD,YAAY,CAAC,SAAS,CAAC,GAAG,GAAG,UAAS,KAAK,EAAC;AACxC,SAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;CAC3C,CAAC;;;;;;;;;;;;;;AAcF,YAAY,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAS,MAAM,EAAC;;;;;AAK1D,MAAI,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;AACtC,MAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;;;AAG3B,MAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAC9B,OAAK,IAAI,GAAG,IAAI,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;AAEhD,MAAI,CAAC,KAAK,GAAG,EAAE,CAAC;;;AAGhB,MAAI;AACA,QAAI,MAAM,CAAC,IAAI,EAAE;AACb,UAAI,CAAC,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC9C;GACJ,CAAC,OAAO,GAAG,EAAE;;GAEb;CACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;AAuBF,YAAY,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAS,MAAM,EAAC;AAC1D,MAAI,IAAI,GAAG,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;;;AAG5B,MAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;AACvC,MAAI,CAAC,UAAU,GAAG,IAAI,CAAC;;;AAGvB,MAAI,CAAC,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC;AACtB,MAAI,CAAC,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC;AACpB,MAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,IAAI,CAAC;AAC1B,MAAI,CAAC,WAAW,GAAG,CAAC,IAAI,IAAI,CAAC;AAC7B,MAAI,CAAC,WAAW,GAAG,CAAC,IAAI,IAAI,CAAC;AAC7B,MAAI,CAAC,KAAK,GAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,GAC9B,IAAI,CAAC,OAAO,EAAE,GACd,KAAK,CAAC;;;AAGZ,MAAI,CAAC,QAAQ,GAAG,GAAG,IAAI,MAAM,CAAC;AAC9B,MAAI,CAAC,SAAS,GAAG,GAAG,IAAI,MAAM,CAAC;AAC/B,MAAI,CAAC,UAAU,GAAG,GAAG,IAAI,MAAM,CAAC;AAChC,MAAI,CAAC,YAAY,GAAG,GAAG,IAAI,MAAM,CAAC;AAClC,MAAI,CAAC,aAAa,GAAG,GAAG,IAAI,MAAM,CAAC;AACnC,MAAI,CAAC,SAAS,GAAG,GAAG,IAAI,MAAM,CAAC;AAC/B,MAAI,CAAC,QAAQ,GAAG,GAAG,IAAI,MAAM,CAAC;CACjC,CAAC","file":"/node_modules/superagent/lib/response-base.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    obj[key] = ResponseBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function(field){\n    return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function(header){\n    // TODO: moar!\n    // TODO: make this a util\n\n    // content-type\n    var ct = header['content-type'] || '';\n    this.type = utils.type(ct);\n\n    // params\n    var params = utils.params(ct);\n    for (var key in params) this[key] = params[key];\n\n    this.links = {};\n\n    // links\n    try {\n        if (header.link) {\n            this.links = utils.parseLinks(header.link);\n        }\n    } catch (err) {\n        // ignore\n    }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function(status){\n    var type = status / 100 | 0;\n\n    // status / class\n    this.status = this.statusCode = status;\n    this.statusType = type;\n\n    // basics\n    this.info = 1 == type;\n    this.ok = 2 == type;\n    this.redirect = 3 == type;\n    this.clientError = 4 == type;\n    this.serverError = 5 == type;\n    this.error = (4 == type || 5 == type)\n        ? this.toError()\n        : false;\n\n    // sugar\n    this.accepted = 202 == status;\n    this.noContent = 204 == status;\n    this.badRequest = 400 == status;\n    this.unauthorized = 401 == status;\n    this.notAcceptable = 406 == status;\n    this.forbidden = 403 == status;\n    this.notFound = 404 == status;\n};\n"]}